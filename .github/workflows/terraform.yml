on:
  repository_dispatch:

jobs:

  get_ticket_details:
    runs-on: ubuntu-latest
    steps:
    - uses: atlassian/gajira-get-issue-details@v2
      id: get_issue
      with:
        issueIdOrKey: ${{ github.event.client_payload.jira_issue_key }}
    - run: |
        echo "issue_key=${{ steps.get_issue.outputs.issueKey }}" >> $GITHUB_OUTPUT 
        echo "assignee=${{ fromJSON(steps.get_issue.outputs.issue).fields.assignee.name }}" >> $GITHUB_OUTPUT

  downstream_job:
    needs: get_ticket_details 
    runs-on: ubuntu-latest
    steps:
    - run: |  
        echo ${{ needs.get_ticket_details.outputs.issue_key }}
        echo ${{ needs.get_ticket_details.outputs.assignee }}
# name: 'Terraform'

# on:
#   repository_dispatch:

# jobs:
#   terraform:
#     name: 'Terraform'
#     runs-on: ubuntu-latest
#     environment: production

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash

#     steps:
#     # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v3

#     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       run: terraform init

#     # # Checks that all Terraform configuration files adhere to a canonical format
#     # - name: Terraform Format
#     #   run: terraform fmt -check

#     # Generates an execution plan for Terraform
#     - name: Terraform Plan
#       run: terraform plan

#       # On push to "master", build or change infrastructure according to Terraform configuration files
#       # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#     - name: Terraform Apply
#       run: terraform apply -auto-approve
